#include <Arduino.h>
#if defined(ESP32)
#include <WiFi.h>
#include <FirebaseESP32.h>
#endif

// Provide the token generation process info.
#include <addons/TokenHelper.h>

// Provide the RTDB payload printing info and other helper functions.
#include <addons/RTDBHelper.h>

// library timer interruptions
#include <esp_timer.h>

// ===========================
// Enter your WiFi credentials
// ===========================
const char* ssid = "CNT_TAMAYO";
const char* password = "JATB30059899";

// ====================
// Firebase Credentials
// ====================
// Define the API Key
#define API_KEY "AIzaSyCqp3N6lLFLPNJz4BqWa_tYaihNlknjY-Y"

// Define the RTDB URL
#define DATABASE_URL "control-panel-solar-1cb81-default-rtdb.firebaseio.com" //<databaseName>.firebaseio.com or <databaseName>.<region>.firebasedatabase.app

// Define the user Email and password that alreadey registerd or added in your project */
#define USER_EMAIL "panelsolar_1@controlpanel.com"
#define USER_PASSWORD "panelsolar_1"

// Define Firebase Data object
FirebaseData fbdo;

// Define Firebase Auth
FirebaseAuth auth;

// Define Firebase Config
FirebaseConfig configFire;

// Define pins for the Foto-Resistors
#define PHOTO_RESISTOR_T1       34
#define PHOTO_RESISTOR_T2       35
#define PHOTO_RESISTOR_B1       32
#define PHOTO_RESISTOR_B2       33

// Define pinf for stepper motor
#define EN                      4
#define DIR                     2
#define STEP                    15

// Define the photoresist variables
float volagePhotoResistorT1 = 0.0;
float volagePhotoResistorT2 = 0.0;
float volagePhotoResistorB1 = 0.0;
float volagePhotoResistorB2 = 0.0;

// Define the average variables
float averagePRT = 0.0;
float averagePRB = 0.0;

// Define the number samples for averaging
int numSample = 10;

// Define samples counters
int countSample = 0;

// Array of samples
float arrayPhotoResistorT1[10]; // array size must be numSample
float arrayPhotoResistorT2[10]; // array size must be numSample
float arrayPhotoResistorB1[10]; // array size must be numSample
float arrayPhotoResistorB2[10]; // array size must be numSample

// Variables de optimizacion
unsigned long lastFirebaseTime = 0;

// Define the parameters for stepper motor
float anglePosition = 0.0;
float angleSP = 0.0;
const float angleStep = 1.8;

// Operations limits
const float angleMax = 205.2;
const float angleMin = -25.2;

// boolean variables
bool statePulse = false;
bool enAuto = false;

// Control Mode
String controlMode = "Manual";

// Generate interruption for pulses
void timerCallbackPulses(void* arg);

// Generate interrption for sampling the sensors
void timerCallbackSampling(void* arg);

void setup() {
  // Initialize serial communication at 115200 bits per second:
  Serial.begin(115200);

  // Set Motor controller pines
  pinMode(EN, OUTPUT); 
	pinMode(DIR, OUTPUT); 
	pinMode(STEP, OUTPUT);

  // Set the resolution to 12 bits (0-4096)
  analogReadResolution(12);

  // Begin Wifi connection 
  WiFi.begin(ssid, password);
  WiFi.setSleep(false);

  Serial.print("WiFi connecting ");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.print(WiFi.localIP());
  Serial.println("' to connect");

  // Begin firebase services integration
  Serial.printf("Firebase Client v%s\n\n", FIREBASE_CLIENT_VERSION);

  // Assign the api key (required)
  configFire.api_key = API_KEY;

  // Assign the user sign in credentials
  auth.user.email = USER_EMAIL;
  auth.user.password = USER_PASSWORD;

  // Assign the RTDB URL (required)
  configFire.database_url = DATABASE_URL;

  // Assign the callback function for the long running token generation task
  configFire.token_status_callback = tokenStatusCallback; // see addons/TokenHelper.h

  Firebase.begin(&configFire, &auth);

  // Comment or pass false value when WiFi reconnection will control by your code or third party library
  Firebase.reconnectWiFi(true);

  Firebase.setDoubleDigits(5);

  // Set the configuration of interrupt by timer for the pulses
  esp_timer_create_args_t pulsesTimerConfig;
  pulsesTimerConfig.callback = timerCallbackPulses;
  pulsesTimerConfig.arg = NULL;
  esp_timer_handle_t pulsesTimerHandle;
  esp_timer_create(&pulsesTimerConfig, &pulsesTimerHandle);
  esp_timer_start_periodic(pulsesTimerHandle, 3000000); // Set the interruption time every 3s

  // Set the configuration of interrupt by timer for sampling the sensor
  esp_timer_create_args_t samplingTimerConfig;
  samplingTimerConfig.callback = timerCallbackSampling;
  samplingTimerConfig.arg = NULL;
  esp_timer_handle_t samplingTimerHandle;
  esp_timer_create(&samplingTimerConfig, &samplingTimerHandle);
  esp_timer_start_periodic(samplingTimerHandle, 500000); // Ste the interrup time every 0.5s

  // Enable stepper motor 
  digitalWrite(EN, LOW);

}

void loop() {
 
  unsigned long currentTime = millis();

  if (currentTime - lastFirebaseTime >= 1000){
    lastFirebaseTime = currentTime;
    
    // Read and update Firebase database every 1s
    if (Firebase.getJSON(fbdo, "/Data")) {
      
      Serial.println("Exite Data");
      
      // Update the values of sensors
      Firebase.setFloat(fbdo, F("Data/PhotoResistorT"), averagePRT);
      Firebase.setFloat(fbdo, F("Data/PhotoResistorB"), averagePRB);
      
      // Read the control mode
      controlMode = Firebase.getString(fbdo, F("/Data/ControlMode")) ? fbdo.to<const char *>() : fbdo.errorReason().c_str();

      // Read the manual control angle set point  
      String angleSPstr = Firebase.getString(fbdo, F("/Data/AngleSetPoint")) ? fbdo.to<const char *>() : fbdo.errorReason().c_str();
      angleSP = angleSPstr.toFloat();

      // Update the values of position angle
      Firebase.setFloat(fbdo, F("/Data/AnglePosition"), anglePosition);

    } else {
      Serial.println("No exite base de datos");
      
    }
  }
}

// Pulses interruption
void timerCallbackPulses(void* arg) {

  // Define the angle that stepper motor must move it
  if(controlMode == "Auto" && enAuto){ 
    Serial.println("Se activo el control automatico");
    
    // Calculate the average values (filter)
    averagePRT = averageArray(arrayPhotoResistorT1, arrayPhotoResistorT2);
    averagePRB = averageArray(arrayPhotoResistorB1, arrayPhotoResistorB2);

    Serial.printf("Los promedio de las fotoResistencias son: %f y %f\n", averagePRT, averagePRB);

    // Define the operation conditions of stepper motor
    if (averagePRT - averagePRB != 0.0){
      if (averagePRT - averagePRB > 0.0){
        if(anglePosition - angleMax + (angleStep/2.0) > 0.0){
          anglePosition = angleMax;
          digitalWrite(STEP, LOW);
          statePulse = true;

        } else {
          digitalWrite(DIR, HIGH);
          pulsesGenerate();
          if (statePulse){
            anglePosition += angleStep;
            Serial.printf("Sumo el angluo %f\n",anglePosition);

          }
        }
        
      } else if (averagePRT - averagePRB < 0.0) {
        if(anglePosition - angleMin - (angleStep/2.0) < 0.0){
          anglePosition = angleMin;
          digitalWrite(STEP, LOW);
          statePulse = true;

        } else {
          pulsesGenerate();
          digitalWrite(DIR, LOW);
          if (statePulse){
            anglePosition -= angleStep;
            Serial.printf("Resto el angluo %f\n",anglePosition);

          }
        }
      }
    } else {
      anglePosition = anglePosition;
      digitalWrite(STEP, LOW);
      statePulse = true;

    }

  } else if(controlMode == "Manual"){

    Serial.println("Se activo el control manual");
    
    Serial.printf("SetPoint en el control manual: %f\n", angleSP);

    // Define the operation conditions of stepper motor
    if((anglePosition-angleSP+(angleStep/2.0) < 0.0) || (anglePosition-angleSP-(angleStep/2.0) > 0.0)){
      if(anglePosition-angleSP+(angleStep/2.0) < 0.0){
        digitalWrite(DIR, HIGH);
        if (statePulse){
          anglePosition += angleStep;
          Serial.printf("Sumo el angluo %f\n",anglePosition);

        }
      } else if(anglePosition-angleSP-(angleStep/2.0) > 0.0){
        digitalWrite(DIR, LOW); 
        if (statePulse){
          anglePosition -= angleStep;
          Serial.printf("Resto el angulo %f\n",anglePosition);
        
        }
      }
      
      pulsesGenerate();

    } else {
      anglePosition = anglePosition;
      digitalWrite(STEP, LOW);
      statePulse = true;

    }
  }

}

// Sampling interruption 
void timerCallbackSampling(void* arg) {
  // Get the photoresistor value in mV
  volagePhotoResistorT1 = analogReadMilliVolts(PHOTO_RESISTOR_T1);
  volagePhotoResistorT2 = analogReadMilliVolts(PHOTO_RESISTOR_T2);
  volagePhotoResistorB1 = analogReadMilliVolts(PHOTO_RESISTOR_B1);
  volagePhotoResistorB2 = analogReadMilliVolts(PHOTO_RESISTOR_B2);
  
  // Print out the values you read:
  Serial.printf("ADC millivolts value PRT = %d\n",volagePhotoResistorT1);
  Serial.printf("ADC millivolts value PRT = %d\n",volagePhotoResistorT2);
  Serial.printf("ADC millivolts value PRB = %d\n",volagePhotoResistorB1);
  Serial.printf("ADC millivolts value PRB = %d\n",volagePhotoResistorB2);

  // Add the samples in the arrays
  if(countSample <  numSample-1){
    arrayPhotoResistorT1[countSample] = volagePhotoResistorT1;
    arrayPhotoResistorT2[countSample] = volagePhotoResistorT2;
    arrayPhotoResistorB1[countSample] = volagePhotoResistorB1;
    arrayPhotoResistorB2[countSample] = volagePhotoResistorB2;
    countSample ++;

  } else {
    arrayPhotoResistorT1[countSample] = volagePhotoResistorT1;
    arrayPhotoResistorT2[countSample] = volagePhotoResistorT2;
    arrayPhotoResistorB1[countSample] = volagePhotoResistorB1;
    arrayPhotoResistorB2[countSample] = volagePhotoResistorB2;
    enAuto = true;
    countSample = 0;
  }

  Serial.printf("Contador de muestras = %d\n",countSample+1);
}

// Average function 
float averageArray(float array1[], float array2[]){
  float average = 0.0;
  for (int i=0; i < numSample; i++){
    average += array1[i];
    average += array2[i];
  }
  average /= (numSample*2);
  return average;
}

// Pulses generater function
void pulsesGenerate(){
  // Define the step pulses of stepper motor
  if(statePulse){
    digitalWrite(STEP, HIGH);
    statePulse = false;

  } else{
    digitalWrite(STEP, LOW);
    statePulse = true;

  }
}
